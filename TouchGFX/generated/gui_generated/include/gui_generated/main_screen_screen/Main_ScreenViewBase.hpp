/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAIN_SCREENVIEWBASE_HPP
#define MAIN_SCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/main_screen_screen/Main_ScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <gui/containers/Message_Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <gui/containers/ClockAndDateSetting.hpp>
#include <gui/containers/Digital_Clock.hpp>
#include <touchgfx/containers/progress_indicators/TextProgress.hpp>
#include <gui/containers/Ready.hpp>
#include <touchgfx/mixins/ClickListener.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>

class Main_ScreenViewBase : public touchgfx::View<Main_ScreenPresenter>
{
public:
    Main_ScreenViewBase();
    virtual ~Main_ScreenViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void History_btn_CallBack()
    {
        // Override and implement this function in Main_Screen
    }

    virtual void Save_btn_CallBack()
    {
        // Override and implement this function in Main_Screen
    }

    virtual void Mode_btn_CallBack()
    {
        // Override and implement this function in Main_Screen
    }

    virtual void New_Proj_btn_CallBack()
    {
        // Override and implement this function in Main_Screen
    }

    virtual void Temp_Correct_btn_CallBack()
    {
        // Override and implement this function in Main_Screen
    }

    virtual void Clock_Touch_CallBack()
    {
        // Override and implement this function in Main_Screen
    }

    virtual void Measure_btn_CallBack()
    {
        // Override and implement this function in Main_Screen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box BACKGROUND;
    touchgfx::ButtonWithLabel TITLE;
    touchgfx::ButtonWithLabel SAVE;
    touchgfx::ButtonWithLabel HISTORY;
    touchgfx::ButtonWithLabel MODE;
    touchgfx::ButtonWithLabel MEASURE;
    touchgfx::ButtonWithLabel NEW_PROJECT;
    touchgfx::ButtonWithLabel TEMP_CORRECT;
    touchgfx::TextAreaWithOneWildcard PROJECT_NUM;
    touchgfx::TextAreaWithOneWildcard TEMPERATURE;
    touchgfx::TextAreaWithOneWildcard RESISTIVITY;
    touchgfx::TextAreaWithOneWildcard RESISTANCE;
    touchgfx::TextArea OHM_UNIT;
    touchgfx::TextArea OHM_CM_UNIT;
    touchgfx::TextAreaWithOneWildcard WARNING;
    touchgfx::TextAreaWithOneWildcard HELP;
    Message_Box message_Box;
    touchgfx::Image USB_SYMBOL;
    ClockAndDateSetting CLOCK_AND_DATE_SETTING;
    Digital_Clock TIME;
    touchgfx::ClickListener< touchgfx::TextProgress > BATTERY_PERCENT;
    Ready READY;

    /*
     * Wildcard Buffers
     */
    static const uint16_t PROJECT_NUM_SIZE = 10;
    touchgfx::Unicode::UnicodeChar PROJECT_NUMBuffer[PROJECT_NUM_SIZE];
    static const uint16_t TEMPERATURE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar TEMPERATUREBuffer[TEMPERATURE_SIZE];
    static const uint16_t RESISTIVITY_SIZE = 10;
    touchgfx::Unicode::UnicodeChar RESISTIVITYBuffer[RESISTIVITY_SIZE];
    static const uint16_t RESISTANCE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar RESISTANCEBuffer[RESISTANCE_SIZE];
    static const uint16_t WARNING_SIZE = 40;
    touchgfx::Unicode::UnicodeChar WARNINGBuffer[WARNING_SIZE];
    static const uint16_t HELP_SIZE = 50;
    touchgfx::Unicode::UnicodeChar HELPBuffer[HELP_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Main_ScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<Main_ScreenViewBase> TIMETouch_ClockCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void TIMETouch_ClockCallbackHandler();

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 32767;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // MAIN_SCREENVIEWBASE_HPP
