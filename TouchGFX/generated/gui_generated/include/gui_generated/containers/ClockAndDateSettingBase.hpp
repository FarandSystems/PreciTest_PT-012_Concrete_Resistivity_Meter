/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef CLOCKANDDATESETTINGBASE_HPP
#define CLOCKANDDATESETTINGBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/scrollers/ScrollWheel.hpp>
#include <gui/containers/NumUpDown.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>

class ClockAndDateSettingBase : public touchgfx::Container
{
public:
    ClockAndDateSettingBase();
    virtual ~ClockAndDateSettingBase() {}
    virtual void initialize();

    virtual void Hour_setUpdateItem(NumUpDown& item, int16_t itemIndex)
    {
        // Override and implement this function in ClockAndDateSetting
    }

    virtual void Minute_setUpdateItem(NumUpDown& item, int16_t itemIndex)
    {
        // Override and implement this function in ClockAndDateSetting
    }

    virtual void Second_setUpdateItem(NumUpDown& item, int16_t itemIndex)
    {
        // Override and implement this function in ClockAndDateSetting
    }

    virtual void Month_setUpdateItem(NumUpDown& item, int16_t itemIndex)
    {
        // Override and implement this function in ClockAndDateSetting
    }

    virtual void Day_setUpdateItem(NumUpDown& item, int16_t itemIndex)
    {
        // Override and implement this function in ClockAndDateSetting
    }

    virtual void Year_setUpdateItem(NumUpDown& item, int16_t itemIndex)
    {
        // Override and implement this function in ClockAndDateSetting
    }

    /*
     * Virtual Action Handlers
     */
    virtual void Button_CallBack()
    {
        // Override and implement this function in ClockAndDateSetting
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Image BackGround;
    touchgfx::Image H_Back;
    touchgfx::Image M_Back;
    touchgfx::Image S_Back;
    touchgfx::TextArea Hour_lbl;
    touchgfx::TextArea Minute_lbl;
    touchgfx::TextArea Second_lbl;
    touchgfx::ScrollWheel Hour_set;
    touchgfx::DrawableListItems<NumUpDown, 2> Hour_setListItems;
    touchgfx::ScrollWheel Minute_set;
    touchgfx::DrawableListItems<NumUpDown, 2> Minute_setListItems;
    touchgfx::ScrollWheel Second_set;
    touchgfx::DrawableListItems<NumUpDown, 2> Second_setListItems;
    touchgfx::ButtonWithLabel Center_Btn;
    touchgfx::TextArea Clock_Hint;
    touchgfx::TextArea Second_lbl_1;
    touchgfx::TextArea Month_lbl;
    touchgfx::TextArea Day_lbl;
    touchgfx::Image Month_Back;
    touchgfx::Image D_Back;
    touchgfx::Image Y_Back;
    touchgfx::ScrollWheel Month_set;
    touchgfx::DrawableListItems<NumUpDown, 2> Month_setListItems;
    touchgfx::ScrollWheel Day_set;
    touchgfx::DrawableListItems<NumUpDown, 2> Day_setListItems;
    touchgfx::ScrollWheel Year_set;
    touchgfx::DrawableListItems<NumUpDown, 2> Year_setListItems;
    touchgfx::TextArea Year_lbl;

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<ClockAndDateSettingBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<ClockAndDateSettingBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);

};

#endif // CLOCKANDDATESETTINGBASE_HPP
