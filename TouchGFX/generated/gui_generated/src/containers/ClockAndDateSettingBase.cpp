/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/ClockAndDateSettingBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

ClockAndDateSettingBase::ClockAndDateSettingBase() :
    buttonCallback(this, &ClockAndDateSettingBase::buttonCallbackHandler),
    updateItemCallback(this, &ClockAndDateSettingBase::updateItemCallbackHandler)
{
    setWidth(250);
    setHeight(130);
    BackGround.setXY(0, 0);
    BackGround.setBitmap(touchgfx::Bitmap(BITMAP_MESSAGE_BOX_BACKGROUND_ID));

    H_Back.setXY(31, 16);
    H_Back.setBitmap(touchgfx::Bitmap(BITMAP_SCROLL_BACK_TEST_ID));

    M_Back.setXY(111, 16);
    M_Back.setBitmap(touchgfx::Bitmap(BITMAP_SCROLL_BACK_TEST_ID));

    S_Back.setXY(186, 16);
    S_Back.setBitmap(touchgfx::Bitmap(BITMAP_SCROLL_BACK_TEST_ID));

    Hour_lbl.setXY(11, 23);
    Hour_lbl.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    Hour_lbl.setLinespacing(0);
    Hour_lbl.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));

    Minute_lbl.setXY(88, 23);
    Minute_lbl.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    Minute_lbl.setLinespacing(0);
    Minute_lbl.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));

    Second_lbl.setXY(167, 23);
    Second_lbl.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    Second_lbl.setLinespacing(0);
    Second_lbl.setTypedText(touchgfx::TypedText(T_SINGLEUSEID37));

    Hour_set.setPosition(31, 16, 50, 50);
    Hour_set.setHorizontal(false);
    Hour_set.setCircular(true);
    Hour_set.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    Hour_set.setSwipeAcceleration(10);
    Hour_set.setDragAcceleration(10);
    Hour_set.setNumberOfItems(24);
    Hour_set.setSelectedItemOffset(0);
    Hour_set.setDrawableSize(50, 0);
    Hour_set.setDrawables(Hour_setListItems, updateItemCallback);
    Hour_set.animateToItem(12, 0);

    Minute_set.setPosition(111, 16, 50, 50);
    Minute_set.setHorizontal(false);
    Minute_set.setCircular(true);
    Minute_set.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    Minute_set.setSwipeAcceleration(10);
    Minute_set.setDragAcceleration(10);
    Minute_set.setNumberOfItems(60);
    Minute_set.setSelectedItemOffset(0);
    Minute_set.setDrawableSize(50, 0);
    Minute_set.setDrawables(Minute_setListItems, updateItemCallback);
    Minute_set.animateToItem(30, 0);

    Second_set.setPosition(186, 16, 50, 50);
    Second_set.setHorizontal(false);
    Second_set.setCircular(true);
    Second_set.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    Second_set.setSwipeAcceleration(10);
    Second_set.setDragAcceleration(10);
    Second_set.setNumberOfItems(60);
    Second_set.setSelectedItemOffset(0);
    Second_set.setDrawableSize(50, 0);
    Second_set.setDrawables(Second_setListItems, updateItemCallback);
    Second_set.animateToItem(30, 0);

    Center_Btn.setXY(62, 78);
    Center_Btn.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_FILLED_SMALL_ID), touchgfx::Bitmap(BITMAP_BUTTON_FILLED_SMALL_ID));
    Center_Btn.setLabelText(touchgfx::TypedText(T_SINGLEUSEID38));
    Center_Btn.setLabelColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    Center_Btn.setLabelColorPressed(touchgfx::Color::getColorFromRGB(41, 41, 41));
    Center_Btn.setAction(buttonCallback);

    add(BackGround);
    add(H_Back);
    add(M_Back);
    add(S_Back);
    add(Hour_lbl);
    add(Minute_lbl);
    add(Second_lbl);
    add(Hour_set);
    add(Minute_set);
    add(Second_set);
    add(Center_Btn);
}

void ClockAndDateSettingBase::initialize()
{
    Hour_set.initialize();
    for (int i = 0; i < Hour_setListItems.getNumberOfDrawables(); i++)
    {
        Hour_setListItems[i].initialize();
    }
    Minute_set.initialize();
    for (int i = 0; i < Minute_setListItems.getNumberOfDrawables(); i++)
    {
        Minute_setListItems[i].initialize();
    }
    Second_set.initialize();
    for (int i = 0; i < Second_setListItems.getNumberOfDrawables(); i++)
    {
        Second_setListItems[i].initialize();
    }
}

void ClockAndDateSettingBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &Center_Btn)
    {
        //Interaction1
        //When Center_Btn clicked call virtual function
        //Call Button_CallBack
        Button_CallBack();
    }
}

void ClockAndDateSettingBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &Hour_setListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        NumUpDown* cc = (NumUpDown*)d;
        Hour_setUpdateItem(*cc, itemIndex);
    }
    if (items == &Minute_setListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        NumUpDown* cc = (NumUpDown*)d;
        Minute_setUpdateItem(*cc, itemIndex);
    }
    if (items == &Second_setListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        NumUpDown* cc = (NumUpDown*)d;
        Second_setUpdateItem(*cc, itemIndex);
    }
}

