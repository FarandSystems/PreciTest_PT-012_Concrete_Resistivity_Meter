/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/main_screen_screen/Main_ScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Main_ScreenViewBase::Main_ScreenViewBase() :
    buttonCallback(this, &Main_ScreenViewBase::buttonCallbackHandler),
    TIMETouch_ClockCallback(this, &Main_ScreenViewBase::TIMETouch_ClockCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 272, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    BACKGROUND.setPosition(-1, 0, 272, 480);
    BACKGROUND.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    TITLE.setXY(1, 0);
    TITLE.setBitmaps(touchgfx::Bitmap(BITMAP_TITLE_ID), touchgfx::Bitmap(BITMAP_TITLE_ID));
    TITLE.setLabelText(touchgfx::TypedText(T_FW412));
    TITLE.setLabelColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    TITLE.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));

    SAVE.setXY(4, 386);
    SAVE.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_HOLLOW_GRAY_ID), touchgfx::Bitmap(BITMAP_BUTTON_HOLLOW_GRAY_ID));
    SAVE.setLabelText(touchgfx::TypedText(T_SAVE));
    SAVE.setLabelColor(touchgfx::Color::getColorFromRGB(206, 202, 206));
    SAVE.setLabelColorPressed(touchgfx::Color::getColorFromRGB(206, 202, 206));
    SAVE.setAction(buttonCallback);

    HISTORY.setXY(139, 320);
    HISTORY.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_HOLLOW_ID), touchgfx::Bitmap(BITMAP_BUTTON_FILLED_ID));
    HISTORY.setLabelText(touchgfx::TypedText(T_SINGLEUSEID4));
    HISTORY.setLabelColor(touchgfx::Color::getColorFromRGB(253, 255, 123));
    HISTORY.setLabelColorPressed(touchgfx::Color::getColorFromRGB(206, 202, 206));
    HISTORY.setAction(buttonCallback);

    MODE.setXY(139, 254);
    MODE.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_HOLLOW_ID), touchgfx::Bitmap(BITMAP_BUTTON_HOLLOW_ID));
    MODE.setLabelText(touchgfx::TypedText(T_MODE_50MM));
    MODE.setLabelColor(touchgfx::Color::getColorFromRGB(253, 255, 123));
    MODE.setLabelColorPressed(touchgfx::Color::getColorFromRGB(253, 255, 123));
    MODE.setAction(buttonCallback);

    MEASURE.setXY(4, 254);
    MEASURE.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_HOLLOW_ID), touchgfx::Bitmap(BITMAP_BUTTON_FILLED_ID));
    MEASURE.setLabelText(touchgfx::TypedText(T_SINGLEUSEID42));
    MEASURE.setLabelColor(touchgfx::Color::getColorFromRGB(253, 255, 123));
    MEASURE.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));
    MEASURE.setAction(buttonCallback);

    NEW_PROJECT.setXY(4, 320);
    NEW_PROJECT.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_HOLLOW_ID), touchgfx::Bitmap(BITMAP_BUTTON_FILLED_ID));
    NEW_PROJECT.setLabelText(touchgfx::TypedText(T_NEW_PROJECT));
    NEW_PROJECT.setLabelColor(touchgfx::Color::getColorFromRGB(253, 255, 123));
    NEW_PROJECT.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));
    NEW_PROJECT.setAction(buttonCallback);

    TEMP_CORRECT.setXY(139, 386);
    TEMP_CORRECT.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_HOLLOW_GRAY_ID), touchgfx::Bitmap(BITMAP_BUTTON_HOLLOW_GRAY_ID));
    TEMP_CORRECT.setLabelText(touchgfx::TypedText(T_SINGLEUSEID9));
    TEMP_CORRECT.setLabelColor(touchgfx::Color::getColorFromRGB(206, 202, 206));
    TEMP_CORRECT.setLabelColorPressed(touchgfx::Color::getColorFromRGB(206, 202, 206));
    TEMP_CORRECT.setAction(buttonCallback);

    PROJECT_NUM.setXY(1, 26);
    PROJECT_NUM.setColor(touchgfx::Color::getColorFromRGB(255, 247, 115));
    PROJECT_NUM.setLinespacing(0);
    Unicode::snprintf(PROJECT_NUMBuffer, PROJECT_NUM_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID11).getText());
    PROJECT_NUM.setWildcard(PROJECT_NUMBuffer);
    PROJECT_NUM.resizeToCurrentText();
    PROJECT_NUM.setTypedText(touchgfx::TypedText(T_SINGLEUSEID10));

    TEMPERATURE.setXY(208, 26);
    TEMPERATURE.setVisible(false);
    TEMPERATURE.setColor(touchgfx::Color::getColorFromRGB(123, 28, 16));
    TEMPERATURE.setLinespacing(0);
    Unicode::snprintf(TEMPERATUREBuffer, TEMPERATURE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID22).getText());
    TEMPERATURE.setWildcard(TEMPERATUREBuffer);
    TEMPERATURE.resizeToCurrentText();
    TEMPERATURE.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));

    RESISTIVITY.setXY(8, 66);
    RESISTIVITY.setVisible(false);
    RESISTIVITY.setColor(touchgfx::Color::getColorFromRGB(255, 247, 115));
    RESISTIVITY.setLinespacing(0);
    Unicode::snprintf(RESISTIVITYBuffer, RESISTIVITY_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID19).getText());
    RESISTIVITY.setWildcard(RESISTIVITYBuffer);
    RESISTIVITY.resizeToCurrentText();
    RESISTIVITY.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));

    RESISTANCE.setXY(9, 143);
    RESISTANCE.setVisible(false);
    RESISTANCE.setColor(touchgfx::Color::getColorFromRGB(140, 198, 58));
    RESISTANCE.setLinespacing(0);
    Unicode::snprintf(RESISTANCEBuffer, RESISTANCE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID18).getText());
    RESISTANCE.setWildcard(RESISTANCEBuffer);
    RESISTANCE.resizeToCurrentText();
    RESISTANCE.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));

    OHM_UNIT.setXY(198, 170);
    OHM_UNIT.setVisible(false);
    OHM_UNIT.setColor(touchgfx::Color::getColorFromRGB(140, 198, 58));
    OHM_UNIT.setLinespacing(0);
    OHM_UNIT.setTypedText(touchgfx::TypedText(T_OHM));

    OHM_CM_UNIT.setXY(198, 99);
    OHM_CM_UNIT.setVisible(false);
    OHM_CM_UNIT.setColor(touchgfx::Color::getColorFromRGB(255, 247, 115));
    OHM_CM_UNIT.setLinespacing(0);
    OHM_CM_UNIT.setTypedText(touchgfx::TypedText(T_OHM_CM));

    WARNING.setXY(136, 128);
    WARNING.setColor(touchgfx::Color::getColorFromRGB(255, 247, 115));
    WARNING.setLinespacing(0);
    Unicode::snprintf(WARNINGBuffer, WARNING_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID31).getText());
    WARNING.setWildcard(WARNINGBuffer);
    WARNING.resizeToCurrentText();
    WARNING.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));

    HELP.setXY(14, 447);
    HELP.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    HELP.setLinespacing(0);
    Unicode::snprintf(HELPBuffer, HELP_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID28).getText());
    HELP.setWildcard(HELPBuffer);
    HELP.resizeToCurrentText();
    HELP.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));

    message_Box.setXY(-1, 0);
    message_Box.setVisible(false);

    USB_SYMBOL.setXY(138, 30);
    USB_SYMBOL.setVisible(false);
    USB_SYMBOL.setBitmap(touchgfx::Bitmap(BITMAP_USB_SYMBOL_ID));

    CLOCK_AND_DATE_SETTING.setXY(11, 97);
    CLOCK_AND_DATE_SETTING.setVisible(false);

    TIME.setXY(2, 57);
    TIME.setTouch_ClockCallback(TIMETouch_ClockCallback);

    BATTERY_PERCENT.setXY(196, 62);
    BATTERY_PERCENT.setProgressIndicatorPosition(2, -3, 50, 26);
    BATTERY_PERCENT.setRange(0, 100);
    BATTERY_PERCENT.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    BATTERY_PERCENT.setNumberOfDecimals(0);
    BATTERY_PERCENT.setTypedText(touchgfx::TypedText(T_BATTERY_VALUE));
    BATTERY_PERCENT.setBackground(touchgfx::Bitmap(BITMAP_BATTERY_SYMBOL_ID));
    BATTERY_PERCENT.setValue(0);
    BATTERY_PERCENT.setVisible(false);

    READY.setXY(247, 62);
    READY.setVisible(false);

    add(__background);
    add(BACKGROUND);
    add(TITLE);
    add(SAVE);
    add(HISTORY);
    add(MODE);
    add(MEASURE);
    add(NEW_PROJECT);
    add(TEMP_CORRECT);
    add(PROJECT_NUM);
    add(TEMPERATURE);
    add(RESISTIVITY);
    add(RESISTANCE);
    add(OHM_UNIT);
    add(OHM_CM_UNIT);
    add(WARNING);
    add(HELP);
    add(message_Box);
    add(USB_SYMBOL);
    add(CLOCK_AND_DATE_SETTING);
    add(TIME);
    add(BATTERY_PERCENT);
    add(READY);
}

void Main_ScreenViewBase::setupScreen()
{
    message_Box.initialize();
    CLOCK_AND_DATE_SETTING.initialize();
    TIME.initialize();
    READY.initialize();
}

void Main_ScreenViewBase::TIMETouch_ClockCallbackHandler()
{
    //Clock_Touch_Interaction
    //When TIME Touch_Clock call virtual function
    //Call Clock_Touch_CallBack
    Clock_Touch_CallBack();
}

void Main_ScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &SAVE)
    {
        //Save_Interaction
        //When SAVE clicked call virtual function
        //Call Save_btn_CallBack
        Save_btn_CallBack();
    }
    else if (&src == &HISTORY)
    {
        //History_Interaction
        //When HISTORY clicked call virtual function
        //Call History_btn_CallBack
        History_btn_CallBack();
    }
    else if (&src == &MODE)
    {
        //Mode_Interaction
        //When MODE clicked call virtual function
        //Call Mode_btn_CallBack
        Mode_btn_CallBack();
    }
    else if (&src == &MEASURE)
    {
        //Measure_Interaction
        //When MEASURE clicked call virtual function
        //Call Measure_btn_CallBack
        Measure_btn_CallBack();
    }
    else if (&src == &NEW_PROJECT)
    {
        //New_Project_Interaction
        //When NEW_PROJECT clicked call virtual function
        //Call New_Proj_btn_CallBack
        New_Proj_btn_CallBack();
    }
    else if (&src == &TEMP_CORRECT)
    {
        //Temp_Correct_Interaction
        //When TEMP_CORRECT clicked call virtual function
        //Call Temp_Correct_btn_CallBack
        Temp_Correct_btn_CallBack();
    }
}
